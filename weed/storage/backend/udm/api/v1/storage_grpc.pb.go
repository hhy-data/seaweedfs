// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: v1/storage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UDMStorage_UploadFile_FullMethodName     = "/storage.v1.UDMStorage/UploadFile"
	UDMStorage_DownloadFile_FullMethodName   = "/storage.v1.UDMStorage/DownloadFile"
	UDMStorage_CacheFile_FullMethodName      = "/storage.v1.UDMStorage/CacheFile"
	UDMStorage_GetStat_FullMethodName        = "/storage.v1.UDMStorage/GetStat"
	UDMStorage_ReadSuperBlock_FullMethodName = "/storage.v1.UDMStorage/ReadSuperBlock"
	UDMStorage_DeleteFile_FullMethodName     = "/storage.v1.UDMStorage/DeleteFile"
)

// UDMStorageClient is the client API for UDMStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UDMStorageClient interface {
	UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileInfo], error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileInfo], error)
	CacheFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*CacheFileReply, error)
	GetStat(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*GetStatReply, error)
	ReadSuperBlock(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*ReadSuperBlockReply, error)
	DeleteFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uDMStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewUDMStorageClient(cc grpc.ClientConnInterface) UDMStorageClient {
	return &uDMStorageClient{cc}
}

func (c *uDMStorageClient) UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UDMStorage_ServiceDesc.Streams[0], UDMStorage_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileRequest, FileInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UDMStorage_UploadFileClient = grpc.ServerStreamingClient[FileInfo]

func (c *uDMStorageClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UDMStorage_ServiceDesc.Streams[1], UDMStorage_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileRequest, FileInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UDMStorage_DownloadFileClient = grpc.ServerStreamingClient[FileInfo]

func (c *uDMStorageClient) CacheFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*CacheFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheFileReply)
	err := c.cc.Invoke(ctx, UDMStorage_CacheFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDMStorageClient) GetStat(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*GetStatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatReply)
	err := c.cc.Invoke(ctx, UDMStorage_GetStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDMStorageClient) ReadSuperBlock(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*ReadSuperBlockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadSuperBlockReply)
	err := c.cc.Invoke(ctx, UDMStorage_ReadSuperBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uDMStorageClient) DeleteFile(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UDMStorage_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UDMStorageServer is the server API for UDMStorage service.
// All implementations must embed UnimplementedUDMStorageServer
// for forward compatibility.
type UDMStorageServer interface {
	UploadFile(*FileRequest, grpc.ServerStreamingServer[FileInfo]) error
	DownloadFile(*FileRequest, grpc.ServerStreamingServer[FileInfo]) error
	CacheFile(context.Context, *FileKey) (*CacheFileReply, error)
	GetStat(context.Context, *FileKey) (*GetStatReply, error)
	ReadSuperBlock(context.Context, *FileKey) (*ReadSuperBlockReply, error)
	DeleteFile(context.Context, *FileKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedUDMStorageServer()
}

// UnimplementedUDMStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUDMStorageServer struct{}

func (UnimplementedUDMStorageServer) UploadFile(*FileRequest, grpc.ServerStreamingServer[FileInfo]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUDMStorageServer) DownloadFile(*FileRequest, grpc.ServerStreamingServer[FileInfo]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedUDMStorageServer) CacheFile(context.Context, *FileKey) (*CacheFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheFile not implemented")
}
func (UnimplementedUDMStorageServer) GetStat(context.Context, *FileKey) (*GetStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedUDMStorageServer) ReadSuperBlock(context.Context, *FileKey) (*ReadSuperBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSuperBlock not implemented")
}
func (UnimplementedUDMStorageServer) DeleteFile(context.Context, *FileKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedUDMStorageServer) mustEmbedUnimplementedUDMStorageServer() {}
func (UnimplementedUDMStorageServer) testEmbeddedByValue()                    {}

// UnsafeUDMStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UDMStorageServer will
// result in compilation errors.
type UnsafeUDMStorageServer interface {
	mustEmbedUnimplementedUDMStorageServer()
}

func RegisterUDMStorageServer(s grpc.ServiceRegistrar, srv UDMStorageServer) {
	// If the following call pancis, it indicates UnimplementedUDMStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UDMStorage_ServiceDesc, srv)
}

func _UDMStorage_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UDMStorageServer).UploadFile(m, &grpc.GenericServerStream[FileRequest, FileInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UDMStorage_UploadFileServer = grpc.ServerStreamingServer[FileInfo]

func _UDMStorage_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UDMStorageServer).DownloadFile(m, &grpc.GenericServerStream[FileRequest, FileInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UDMStorage_DownloadFileServer = grpc.ServerStreamingServer[FileInfo]

func _UDMStorage_CacheFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).CacheFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UDMStorage_CacheFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).CacheFile(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDMStorage_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UDMStorage_GetStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).GetStat(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDMStorage_ReadSuperBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).ReadSuperBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UDMStorage_ReadSuperBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).ReadSuperBlock(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UDMStorage_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UDMStorageServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UDMStorage_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UDMStorageServer).DeleteFile(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UDMStorage_ServiceDesc is the grpc.ServiceDesc for UDMStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UDMStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.v1.UDMStorage",
	HandlerType: (*UDMStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheFile",
			Handler:    _UDMStorage_CacheFile_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _UDMStorage_GetStat_Handler,
		},
		{
			MethodName: "ReadSuperBlock",
			Handler:    _UDMStorage_ReadSuperBlock_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _UDMStorage_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _UDMStorage_UploadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _UDMStorage_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/storage.proto",
}
