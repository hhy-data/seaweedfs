// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: private/v1/tapeio.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TapeIO_WriteToTape_FullMethodName  = "/private.v1.TapeIO/WriteToTape"
	TapeIO_ReadFromTape_FullMethodName = "/private.v1.TapeIO/ReadFromTape"
)

// TapeIOClient is the client API for TapeIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapeIOClient interface {
	// WriteToTape reads files from the specified locations and writes them to tape.
	WriteToTape(ctx context.Context, in *WriteToTapeRequest, opts ...grpc.CallOption) (*WriteToTapeResponse, error)
	// ReadFromTape reads files from tape and writes them to the specified locations.
	ReadFromTape(ctx context.Context, in *ReadFromTapeRequest, opts ...grpc.CallOption) (*ReadFromTapeResponse, error)
}

type tapeIOClient struct {
	cc grpc.ClientConnInterface
}

func NewTapeIOClient(cc grpc.ClientConnInterface) TapeIOClient {
	return &tapeIOClient{cc}
}

func (c *tapeIOClient) WriteToTape(ctx context.Context, in *WriteToTapeRequest, opts ...grpc.CallOption) (*WriteToTapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteToTapeResponse)
	err := c.cc.Invoke(ctx, TapeIO_WriteToTape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapeIOClient) ReadFromTape(ctx context.Context, in *ReadFromTapeRequest, opts ...grpc.CallOption) (*ReadFromTapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFromTapeResponse)
	err := c.cc.Invoke(ctx, TapeIO_ReadFromTape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapeIOServer is the server API for TapeIO service.
// All implementations must embed UnimplementedTapeIOServer
// for forward compatibility.
type TapeIOServer interface {
	// WriteToTape reads files from the specified locations and writes them to tape.
	WriteToTape(context.Context, *WriteToTapeRequest) (*WriteToTapeResponse, error)
	// ReadFromTape reads files from tape and writes them to the specified locations.
	ReadFromTape(context.Context, *ReadFromTapeRequest) (*ReadFromTapeResponse, error)
	mustEmbedUnimplementedTapeIOServer()
}

// UnimplementedTapeIOServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTapeIOServer struct{}

func (UnimplementedTapeIOServer) WriteToTape(context.Context, *WriteToTapeRequest) (*WriteToTapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToTape not implemented")
}
func (UnimplementedTapeIOServer) ReadFromTape(context.Context, *ReadFromTapeRequest) (*ReadFromTapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFromTape not implemented")
}
func (UnimplementedTapeIOServer) mustEmbedUnimplementedTapeIOServer() {}
func (UnimplementedTapeIOServer) testEmbeddedByValue()                {}

// UnsafeTapeIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapeIOServer will
// result in compilation errors.
type UnsafeTapeIOServer interface {
	mustEmbedUnimplementedTapeIOServer()
}

func RegisterTapeIOServer(s grpc.ServiceRegistrar, srv TapeIOServer) {
	// If the following call pancis, it indicates UnimplementedTapeIOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TapeIO_ServiceDesc, srv)
}

func _TapeIO_WriteToTape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteToTapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapeIOServer).WriteToTape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TapeIO_WriteToTape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapeIOServer).WriteToTape(ctx, req.(*WriteToTapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapeIO_ReadFromTape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFromTapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapeIOServer).ReadFromTape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TapeIO_ReadFromTape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapeIOServer).ReadFromTape(ctx, req.(*ReadFromTapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TapeIO_ServiceDesc is the grpc.ServiceDesc for TapeIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TapeIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "private.v1.TapeIO",
	HandlerType: (*TapeIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteToTape",
			Handler:    _TapeIO_WriteToTape_Handler,
		},
		{
			MethodName: "ReadFromTape",
			Handler:    _TapeIO_ReadFromTape_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/v1/tapeio.proto",
}
